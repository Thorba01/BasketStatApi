// <auto-generated />
using System;
using BasketStatsApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BasketStatsApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230430095535_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BasketStatsApi.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opponent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Matchs");
                });

            modelBuilder.Entity("BasketStatsApi.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BasketStatsApi.Models.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("Blocks")
                        .HasColumnType("int");

                    b.Property<int>("Deffalt")
                        .HasColumnType("int");

                    b.Property<int>("Defrebound")
                        .HasColumnType("int");

                    b.Property<string>("Homeaway")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Interceptions")
                        .HasColumnType("int");

                    b.Property<int>("Looseball")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Minplayed")
                        .HasColumnType("int");

                    b.Property<int>("Offfalt")
                        .HasColumnType("int");

                    b.Property<int>("Offrebound")
                        .HasColumnType("int");

                    b.Property<int>("Onepointmade")
                        .HasColumnType("int");

                    b.Property<int>("Onepointmiss")
                        .HasColumnType("int");

                    b.Property<int>("Technicalfalt")
                        .HasColumnType("int");

                    b.Property<int>("Threepointmade")
                        .HasColumnType("int");

                    b.Property<int>("Threepointmiss")
                        .HasColumnType("int");

                    b.Property<int>("Totalpoints")
                        .HasColumnType("int");

                    b.Property<int>("Twopointmade")
                        .HasColumnType("int");

                    b.Property<int>("Twopointmiss")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("BasketStatsApi.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Teamname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("BasketStatsApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BasketStatsApi.Models.Match", b =>
                {
                    b.HasOne("BasketStatsApi.Models.Player", "Player")
                        .WithMany("Matchs")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BasketStatsApi.Models.Player", b =>
                {
                    b.HasOne("BasketStatsApi.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BasketStatsApi.Models.Stat", b =>
                {
                    b.HasOne("BasketStatsApi.Models.Match", "Match")
                        .WithOne("Stat")
                        .HasForeignKey("BasketStatsApi.Models.Stat", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("BasketStatsApi.Models.Team", b =>
                {
                    b.HasOne("BasketStatsApi.Models.User", "User")
                        .WithMany("Teams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BasketStatsApi.Models.Match", b =>
                {
                    b.Navigation("Stat");
                });

            modelBuilder.Entity("BasketStatsApi.Models.Player", b =>
                {
                    b.Navigation("Matchs");
                });

            modelBuilder.Entity("BasketStatsApi.Models.Team", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("BasketStatsApi.Models.User", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
